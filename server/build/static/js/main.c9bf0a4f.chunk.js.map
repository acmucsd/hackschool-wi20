{"version":3,"sources":["images/aight-imma-out.png","images/badmeme.jpeg","components/Footer/index.jsx","components/MemeCard/index.jsx","pages/MemeGallery/index.jsx","components/TextBox/index.jsx","components/TemplateSelect/index.jsx","pages/MemeGenerator/index.jsx","components/NavBar/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","id","LikeButton","props","toggleLikes","event","preventDefault","fetch","method","headers","body","JSON","stringify","likedStatus","state","likes","then","response","json","setState","isLiked","likedOrNot","this","type","className","onClick","role","alt","React","Component","MemeCard","src","MemeGallery","memeArray","memes","map","meme","key","_id","image","creator","TextBox","name","cols","rows","onChange","e","handleText","index","target","value","TemplateSelect","url","width","height","reselectMeme","MemeGenerator","handleMemeText","text","textArray","handleCreatedBy","createdBy","currentMeme","numOfTexts","box_count","uploadMeme","status","window","location","href","console","log","success","data","numList","i","push","textboxes","num","memeSelects","NavBar","genActive","galleryActive","App","pageName","String","split","page","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c9bf0a4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aight-imma-out.92b64427.png\";","module.exports = __webpack_public_path__ + \"static/media/badmeme.6df7a44f.jpeg\";","import React from 'react';\nimport './style.css';\n\nconst Footer = () => {\n    return (\n        <div id=\"footer\">\n\n        </div>\n    );\n};\n\nexport default Footer;","import React from 'react';\nimport './style.css';\n\n/* Each LikeButton needs two aspects: the number of likes the meme currently has and whether the meme was already liked. */\nclass LikeButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            likedStatus: props[\"likedStatus\"],\n            likes: props[\"likes\"]\n        };\n    }\n\n    // We make an arrow function to show that this method is part of this class. \n    toggleLikes = (event) => {\n        event.preventDefault();\n        fetch(\"/likememe\", {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: this.props.id,\n                likedStatus: this.state.likedStatus,\n                likes: this.state.likes\n            })\n        }).then(response => response.json())\n          .then(response => {\n            this.setState({\n                likedStatus: response.isLiked,\n                likes: response.likes\n            });\n        })\n    }\n    \n    render() {\n        const likedOrNot = this.state.likedStatus ? \"liked\" : \"unliked\";\n        return (\n            <button type=\"button\" className={likedOrNot} onClick={this.toggleLikes}>\n                <span role=\"img\" alt=\"like\">üëç</span>\n                {this.state.likes}\n            </button>\n        ); \n    }\n}\n\n/** Think about what are arguments we need to pass into this component. This would be found in the props object. */\nconst MemeCard = (props) => {\n    return (\n        <div className=\"meme-card\" alt=\"meme\">\n            <img src={props[\"image\"]}/>\n            <p>{props[\"creator\"]}</p>\n            <LikeButton likes={props[\"likes\"]} likedStatus={props[\"likedStatus\"]} id={props[\"id\"]}/>\n        </div>\n    )\n}\n\nexport default MemeCard;","import React from 'react';\nimport './style.css';\n\nimport aight from '../../images/aight-imma-out.png';\nimport badMeme from '../../images/badmeme.jpeg';\nimport MemeCard from '../../components/MemeCard';\n\nclass MemeGallery extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            memeArray: null\n        };\n        fetch(\"/getmeme\")\n            .then(response => response.json())\n            .then(response => {\n                this.setState({\n                    memeArray: response\n                });\n            });\n    }\n    \n    render() {\n        if (!this.state.memeArray) {\n            return <div/>\n        }\n        const memes = this.state.memeArray.map((meme) => \n            <MemeCard key={meme._id} id={meme._id} image={meme.image} creator={meme.creator} likes={meme.likes} likedStatus={meme.isLiked} />\n        )\n        return (\n            <div id=\"content\">\n                <h2>Meme Gallery</h2>\n                <div className=\"memes\">\n                    {memes}\n                </div>\n            </div>\n        );\n    }\n}\n\n// const MemeGallery = () => {\n//     return (\n//         <div id=\"content\">\n//             <h2>Meme Gallery</h2>\n//             <div className=\"memes\">\n//                 {memes}\n//             </div>\n//         </div>\n//     );\n// }\n\nexport default MemeGallery;","import React from 'react';\nimport './style.css';\n\nconst TextBox = (props) => {\n    return (\n      <div className=\"textbox\">\n        <h3>{props[\"text\"]}</h3>\n        <textarea className=\"textbox\" \n                  name={props[\"text\"]} \n                  cols=\"50\" \n                  rows=\"2\" \n                  onChange={(e) => props.handleText(props.index, e.target.value)}/>\n      </div>\n    );\n};\n\nexport default TextBox;","import React from 'react';\nimport './style.css';\n\nconst TemplateSelect = (props) => {\n    return (\n        <img\n            key={props.meme.id}\n            src={props.meme.url}\n            width='50'\n            height='50'\n            onClick={props.reselectMeme}\n        />\n    )\n}\n\nexport default TemplateSelect","import React from 'react';\nimport './style.css';\nimport TextBox from '../../components/TextBox';\nimport TemplateSelect from '../../components/TemplateSelect'\n\nimport {reselectMeme} from '../../utils';\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            memeArray: null,\n            currentMeme: null,\n            numOfTexts: 0,\n            textArray: [],\n            createdBy: \"\"\n        };\n        // Grabs memes from imgflip\n        fetch('https://api.imgflip.com/get_memes')\n            .then(response => response.json())\n            .then(response => {\n                if (response.success) {\n                    const memes = response.data.memes;\n                    this.setState({\n                        memeArray: memes,\n                        currentMeme: memes[0],\n                        numOfTexts: memes[0].box_count,\n                        textArray: [],\n                        createdBy: \"\"\n                    });\n                }\n            });\n    }\n\n    handleMemeText = (index, text) => {\n        this.state.textArray[index] = text;\n    };\n\n    handleCreatedBy = (index, text) => {\n        this.setState({\n            createdBy: text\n        });\n    }\n\n    reselectMeme = (meme) => {\n        this.setState({\n            currentMeme: meme, \n            numOfTexts: meme.box_count,\n        });\n    };\n\n    uploadMeme = () => {\n        fetch('/sendmeme', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                meme: this.state.currentMeme,\n                textArray: this.state.textArray,\n                numOfTexts: this.state.numOfTexts,\n                createdBy: this.state.createdBy\n            })\n        }).then(response => {\n            if (response.status == 200) { \n                window.location.href = \"/gallery\"; \n            }\n            else {\n                console.log(response);\n            }\n        })\n    }\n\n    render() {\n        // Considers case when memeArray is null --> state when waiting for API fetch to finish\n        if (!this.state.memeArray) {\n            return <div> </div>\n        }\n        // Dynamically set the number of TextBoxes based on the meme.\n        let numList = [];\n        for (let i = 1; i <= this.state[\"numOfTexts\"]; i++) {\n            numList.push(i);\n        }\n        const textboxes = numList.map((num) => \n            <TextBox text={\"Text \" + num} key={num} index={num-1} handleText={this.handleMemeText}/>\n        );\n        const memeSelects = this.state.memeArray.map((meme) => \n            <TemplateSelect\n                key={meme.id}\n                meme={meme}\n                reselectMeme={() => this.reselectMeme(meme)}\n            />\n        );\n\n        return (\n            <div id=\"content\">\n            <h2>Meme Generator</h2>\n            <img className=\"memeImg\" src={this.state.currentMeme.url} alt=\"meme template\"/>\n            <div className=\"textboxes\">\n                {textboxes}\n                <TextBox text=\"Created By?\" index={0} handleText={this.handleCreatedBy}/>\n            </div>\n            <button className=\"button\" type=\"submit\" onClick={() => this.uploadMeme()}>Submit meme!</button>\n            <div className=\"memeTemplates\"></div>\n                {memeSelects}\n            </div>\n        );\n    }\n}\n\n// const MemeGenerator = (props) => {\n//     return (\n//         <div id=\"content\">\n//         <h2>Meme Generator</h2>\n//         <img className=\"memeImg\" src={badMeme} alt=\"meme template\"/>\n//         <div className=\"textboxes\">\n//             <TextBox text=\"Text 1\" />\n//             <TextBox text=\"Text 2\" />\n//             <TextBox text=\"Text 3\" />\n//             <TextBox text=\"Created By?\" />\n//         </div>\n//         <button className=\"button\" type=\"button\">Submit meme!</button>\n//         </div>\n//     );\n// }\n\nexport default MemeGenerator;","import React from 'react';\nimport './style.css';\n\n/* Class Component */\nclass NavBar extends React.Component {\n    constructor(props) {\n        super(props); // this part of the code runs the default version of the constructor\n        this.state = {\n            genActive: this.props[\"page\"]===\"\" ? \"current\" : \"\",\n            galleryActive: this.props[\"page\"]===\"gallery\" ? \"current\" : \"\"\n        }\n    }\n\n    /* Same as in the functional component.*/\n    render() {\n      return (\n        <div id=\"navbar\">\n            <h1>ACM UCSD Meme Gen</h1>\n            <div id=\"navlinks\">\n                <a className=\"links\" id={this.state.genActive} href=\"/\">Generator</a>\n                <a className=\"links\" id={this.state.galleryActive} href=\"/gallery\">Gallery</a>\n            </div>\n        </div>\n      ); \n    }\n}\n\n/* Functional Component */\n// const NavBar = (props) => {\n//     return (\n//         <div id=\"navbar\">\n//             <h1>ACM UCSD Meme Gen</h1>\n//             <div id=\"navlinks\">\n//                 <a className=\"links\" href=\"index.html\">Generator</a>\n//                 <a className=\"links\" href=\"gallery.html\">Gallery</a>\n//             </div>\n//         </div>\n//     )\n// };\n\nexport default NavBar;","import React from 'react';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\n\nimport Footer from './components/Footer';\nimport MemeGallery from './pages/MemeGallery';\nimport MemeGenerator from './pages/MemeGenerator';\nimport NavBar from './components/NavBar';\n\nfunction App() {\n  const pageName = String(window.location).split(\"/\")[3];\n  return (\n    <Router>\n       <NavBar page={pageName} />\n       <Switch>\n         <Route path=\"/gallery\">\n           <MemeGallery/>\n         </Route>\n         <Route path=\"/\">\n           <MemeGenerator/>\n         </Route>\n       </Switch>\n       <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}